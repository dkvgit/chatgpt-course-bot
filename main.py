import os
from dotenv import load_dotenv
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
RAILWAY_STATIC_URL = os.getenv("RAILWAY_STATIC_URL")
PORT = int(os.getenv("PORT", 8080))

# === –ò–º–ø–æ—Ä—Ç—ã
from handlers.start import start
from handlers.lessons import handle_step
from handlers.payment import handle_payment_buttons
from handlers.menu import (
    menu,
    open_lesson,
    back_to_menu_handler,
    set_paid_users,
)
from handlers.admin import grant
from handlers.info import show_program
from utils.access import load_paid_users, save_paid_users
from lessons_data import LESSONS

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

from handlers.menu import set_paid_users as set_menu_paid_users
from handlers.admin import set_paid_users as set_admin_paid_users
from handlers.admin import grant, revoke, list_paid, set_paid_users as set_admin_paid_users



PAID_USERS = load_paid_users()

set_menu_paid_users(PAID_USERS)
set_admin_paid_users(PAID_USERS)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ.")
        return
    if update.message.video:
        file_id = update.message.video.file_id
        await update.message.reply_text(f"`{file_id}`", parse_mode='Markdown')


async def go_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
             "–¢—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëâ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="step_0")],
            [InlineKeyboardButton("üí≥ –°—Ä–∞–∑—É –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy")]
        ])
    )


async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë§ –¢–≤–æ–π user_id: {update.message.from_user.id}")


# === Webhook + —Å—Ç–∞—Ä—Ç

async def handle_webhook(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")

async def on_startup(app):
    await application.initialize()
    await application.start()
    webhook_url = f"https://{RAILWAY_STATIC_URL}/{BOT_TOKEN}"
    print("üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook:", webhook_url)
    await application.bot.set_webhook(webhook_url)

async def root(request):
    return web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = ApplicationBuilder().token(BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CommandHandler("myid", my_id))
application.add_handler(CommandHandler("grant", grant))
application.add_handler(CommandHandler("revoke", revoke))  # üëà –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
application.add_handler(MessageHandler(filters.VIDEO, get_file_id))
application.add_handler(CommandHandler("list_paid", list_paid))

application.add_handler(CallbackQueryHandler(handle_step, pattern="^step_.*$"))
application.add_handler(CallbackQueryHandler(handle_payment_buttons, pattern="^(buy|paid|not_ready)$"))
application.add_handler(CallbackQueryHandler(go_home, pattern="^go_home$"))
application.add_handler(CallbackQueryHandler(open_lesson, pattern="^menu_lesson_.*"))
application.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern="^back_to_menu$"))
application.add_handler(CallbackQueryHandler(show_program, pattern="^show_program$"))


# === –ó–∞–ø—É—Å–∫ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞
web_app = web.Application()
web_app.router.add_post(f"/{BOT_TOKEN}", handle_webhook)
web_app.router.add_get("/", root)
web_app.on_startup.append(on_startup)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Railway...")
    web.run_app(web_app, port=PORT)
