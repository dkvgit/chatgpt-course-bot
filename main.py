import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Railway:
PORT = int(os.environ.get('PORT', 8000))
RAILWAY_STATIC_URL = os.environ.get('RAILWAY_STATIC_URL')

# === –ò–º–ø–æ—Ä—Ç—ã ===
from handlers.start import start, set_paid_users as set_start_paid_users
from handlers.lessons import handle_step
from handlers.payment import handle_payment_buttons
from handlers.menu import (
    menu,
    open_lesson,
    back_to_menu_handler,
    set_paid_users as set_menu_paid_users,
)
from handlers.admin import grant, revoke, list_paid, set_paid_users as set_admin_paid_users
from handlers.info import show_program, show_lessons_menu
from utils.supabase_db import fetch_all_paid_users

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
PAID_USERS = fetch_all_paid_users()
set_menu_paid_users(PAID_USERS)
set_admin_paid_users(PAID_USERS)
set_start_paid_users(PAID_USERS)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ.")
        return
    if update.message.video:
        file_id = update.message.video.file_id
        await update.message.reply_text(f"`{file_id}`", parse_mode='Markdown')

async def go_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
             "–¢—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëâ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="step_0")],
            [InlineKeyboardButton("üí≥ –°—Ä–∞–∑—É –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy")]
        ])
    )

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë§ –¢–≤–æ–π user_id: {update.message.from_user.id}")

async def go_paid_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in PAID_USERS:
        await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        return

    await show_lessons_menu(context, query.message.chat.id)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("myid", my_id))
    application.add_handler(CommandHandler("grant", grant))
    application.add_handler(CommandHandler("revoke", revoke))
    application.add_handler(CommandHandler("list_paid", list_paid))
    application.add_handler(MessageHandler(filters.VIDEO, get_file_id))
    application.add_handler(CallbackQueryHandler(go_paid_menu_handler, pattern="^go_paid_menu$"))
    application.add_handler(CallbackQueryHandler(handle_step, pattern="^step_.*$"))
    application.add_handler(CallbackQueryHandler(handle_payment_buttons, pattern="^(buy|paid|not_ready|sepa_details|binance_details|cards_info|crypto_info|bank_info|additional_info)$"))
    application.add_handler(CallbackQueryHandler(go_home, pattern="^go_home$"))
    application.add_handler(CallbackQueryHandler(open_lesson, pattern="^menu_lesson_.*"))
    application.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern="^back_to_menu$"))
    application.add_handler(CallbackQueryHandler(show_program, pattern="^show_program$"))

    # === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä: webhook –Ω–∞ Railway, polling –ª–æ–∫–∞–ª—å–Ω–æ ===
    if RAILWAY_STATIC_URL:
        webhook_url = f"https://{RAILWAY_STATIC_URL}/webhook"
        print(f"üöÄ Railway: –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook –Ω–∞ {webhook_url}")
        print(f"üîß PORT: {PORT}")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=webhook_url,
        )
    else:
        print("üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling...")
        application.run_polling()



if __name__ == "__main__":
    main()
