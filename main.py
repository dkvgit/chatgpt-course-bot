from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
from aiohttp import web
from handlers.start import start
from lessons_data import LESSONS
from handlers.lessons import handle_step
from handlers.payment import handle_payment_buttons



# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN="7927577300:AAGM-KTDK3eAx8sS59fWaEKCF4ZZYtNgI18"
OWNER_ID=5425101564
RAILWAY_STATIC_URL="web-production-c31c.up.railway.app"

PORT = int(os.getenv("PORT", 8080))
PAID_USERS = set()

# === –ö–ù–û–ü–ö–ò ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    
# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —É—Ä–æ–∫–æ–≤ ===
async def show_lessons_menu(context, chat_id):
    buttons = []
    for key, lesson in LESSONS.items():
        if key.startswith("lesson_"):
            buttons.append([InlineKeyboardButton(lesson["title"], callback_data=f"menu_{key}")])

    await context.bot.send_message(chat_id=chat_id, text="üìö –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))


# === /menu –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in PAID_USERS:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏.")
        return

    await show_lessons_menu(context, update.message.chat.id)


# === –û—Ç–∫—Ä—ã—Ç–∏–µ –ª—é–±–æ–≥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞ ===
async def open_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in PAID_USERS:
        await query.edit_message_text("üîí –£—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        return

    key = query.data.replace("menu_", "")
    lesson = LESSONS.get(key)
    if lesson:
        await context.bot.send_video(chat_id=query.message.chat.id, video=lesson["file_id"], caption=lesson['title'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –≤ user_data
        context.user_data["current_lesson"] = key

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await show_next_lesson_options(context, query.message.chat.id, key)


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ ===
async def show_next_lesson_options(context, chat_id, current_lesson_key):
    current_num = int(current_lesson_key.split('_')[1])
    next_num = current_num + 1
    next_lesson_key = f"lesson_{next_num}"

    buttons = []

    if next_lesson_key in LESSONS:
        next_title = LESSONS[next_lesson_key]["title"]
        buttons.append([InlineKeyboardButton(f"‚ñ∂Ô∏è {next_title}", callback_data=f"menu_{next_lesson_key}")])

    buttons.append([InlineKeyboardButton("üìö –í—Å–µ —É—Ä–æ–∫–∏", callback_data="back_to_menu"),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")])

    await context.bot.send_message(chat_id=chat_id, text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É?",
        reply_markup=InlineKeyboardMarkup(buttons))


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ —É—Ä–æ–∫–∏" ===
async def back_to_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in PAID_USERS:
        await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        return

    buttons = []
    for key, lesson in LESSONS.items():
        if key.startswith("lesson_"):
            buttons.append([InlineKeyboardButton(lesson["title"], callback_data=f"menu_{key}")])

    await query.edit_message_text("üìö –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))


# === –ü–æ–ª—É—á–µ–Ω–∏–µ file_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ.")
        return
    if update.message.video:
        file_id = update.message.video.file_id
        await update.message.reply_text(f"`{file_id}`", parse_mode='Markdown')


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –Ω–∞—á–∞–ª–æ" ===
async def go_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–º–µ–Ω—ã update
    await context.bot.send_message(chat_id=query.message.chat.id,
        text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
             "–¢—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="step_0")],
            [InlineKeyboardButton("üí≥ –°—Ä–∞–∑—É –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy")]]))


# === –£–∑–Ω–∞—Ç—å —Å–≤–æ–π user_id ===
async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë§ –¢–≤–æ–π user_id: {update.message.from_user.id}")


# === –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant 12345678")
        return

    try:
        target_id = int(context.args[0])
        PAID_USERS.add(target_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –¥–æ—Å—Ç—É–ø–∞
        print(f"üí∞ –ê–¥–º–∏–Ω –≤—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

        await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        await context.bot.send_message(chat_id=target_id,
            text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    except (ValueError, IndexError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –æ—à–∏–±–∫–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        

# === –ó–ê–ü–£–°–ö ===
async def handle_webhook(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")

async def on_startup(app):
    await application.initialize()
    await application.start()
    webhook_url = f"https://{RAILWAY_STATIC_URL}/{BOT_TOKEN}"
    print("üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook:", webhook_url)
    await application.bot.set_webhook(webhook_url)

async def root(request):
    return web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ===
application = ApplicationBuilder().token(BOT_TOKEN).build()

# === –î–æ–±–∞–≤—å —Å–≤–æ–∏ handlers —Å—é–¥–∞ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CommandHandler("myid", my_id))
application.add_handler(CommandHandler("grant", grant))
application.add_handler(MessageHandler(filters.VIDEO, get_file_id))
application.add_handler(CallbackQueryHandler(handle_step, pattern="^step_.*$"))  # step_0, step_1, step_2
application.add_handler(CallbackQueryHandler(handle_payment_buttons, pattern="^(buy|paid|not_ready)$"))
application.add_handler(CallbackQueryHandler(go_home, pattern="^go_home$"))
application.add_handler(CallbackQueryHandler(open_lesson, pattern="^menu_lesson_.*"))
application.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern="^back_to_menu$"))

# === aiohttp —Å–µ—Ä–≤–µ—Ä Railway ===
web_app = web.Application()
web_app.router.add_post(f"/{BOT_TOKEN}", handle_webhook)
web_app.router.add_get("/", root)
web_app.on_startup.append(on_startup)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Railway...")
    web.run_app(web_app, port=PORT)
