from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
from aiohttp import web

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID_ENV = os.getenv("OWNER_ID")
RAILWAY_STATIC_URL = os.getenv("RAILWAY_STATIC_URL")
PORT = int(os.getenv("PORT", 8080))

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
print("‚úÖ ENV BOT_TOKEN:", BOT_TOKEN[:10] + "..." if BOT_TOKEN else "‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
print("‚úÖ ENV OWNER_ID:", OWNER_ID_ENV or "‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
print("‚úÖ ENV RAILWAY_STATIC_URL:", RAILWAY_STATIC_URL or "‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if not OWNER_ID_ENV:
    print("‚ö†Ô∏è OWNER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É")
    OWNER_ID = 0
else:
    OWNER_ID = int(OWNER_ID_ENV)

PAID_USERS = set()


# –í—Å–µ —É—Ä–æ–∫–∏
LESSONS = {"lesson_0": {"title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫—É—Ä—Å –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏: –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ä—Ç —Å ChatGPT", "file_id": "BAACAgQAAxkBAAMDaEhKiH81kqU7n6gwyZrPvfHUxxkAAm4YAAIbBkFSitZ_6O09L_82BA"}, "lesson_1": {"title": "–£—Ä–æ–∫ 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å ChatGPT", "file_id": "BAACAgQAAxkBAAMFaEhLK6c1vLL79Q5g_mvoFAABWJAhAAJwGAACGwZBUioldIP1mCYkNgQ"}, "lesson_2": {"title": "–£—Ä–æ–∫ 2: –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "file_id": "BAACAgQAAxkBAAMHaEhMcN2U21N1G4YapPigdwa3bo0AAnMYAAIbBkFSSue7-aHqqaU2BA"}, "lesson_3": {"title": "–£—Ä–æ–∫ 3: –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ChatGPT", "file_id": "BAACAgQAAxkBAAMPaEhQ744iIguAsHpdWxgBfxSyazcAAncYAAIbBkFSnLB9razsga82BA"}, "lesson_4": {"title": "–£—Ä–æ–∫ 4: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "file_id": "BAACAgQAAxkBAAMRaEhRm8VMDLUZNpFMrdT4mq_kLtsAAngYAAIbBkFSR9leUkrI6A02BA"}, "lesson_5": {"title": "–£—Ä–æ–∫ 5: –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã", "file_id": "BAACAgQAAxkBAAMTaEhSDiQPbKQGs_yrJHwwms0BwK8AAnkYAAIbBkFScwGvzfAicJw2BA"}, "lesson_6": {"title": "–£—Ä–æ–∫ 6: –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏", "file_id": "BAACAgQAAxkBAAMVaEhUXy7zNyxd86eMLXgjhygot6QAAnwYAAIbBkFSMQWn8c-tXZk2BA"}, "lesson_7": {"title": "–£—Ä–æ–∫ 7: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "file_id": "BAACAgQAAxkBAAMXaEhUqD-bmcNx8EpG29hWYth3OKAAAn0YAAIbBkFS5SweQtSDfYQ2BA"}, "lesson_8": {"title": "–£—Ä–æ–∫ 8: –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "file_id": "BAACAgQAAxkBAAIBIWhJTFeHwFR1TnuUYDdLrrk-chDkAAIWGQACGwZJUhFc-hqK-hf8NgQ"}}


# === START ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—É—Å–∫–∞
    args = context.args
    source = args[0] if args else "direct"
    user_id = update.message.from_user.id

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (–º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î)
    if source == "landing":
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª —Å –ª–µ–Ω–¥–∏–Ω–≥–∞")
        welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
    elif source == "program":
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–∞")
        welcome_text = "üëã –û—Ç–ª–∏—á–Ω–æ! –í—ã –∏–∑—É—á–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
    elif source == "webapp":
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –∏–∑ WebApp")
        welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
    else:
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é")
        welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"

    context.user_data["step"] = 0
    context.user_data["source"] = source  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

    await update.message.reply_text(
        welcome_text + "–¢—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="step_0")],
            [InlineKeyboardButton("üí≥ –°—Ä–∞–∑—É –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy")]]))

# === –ö–ù–û–ü–ö–ò ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # === –£—Ä–æ–∫ 0 ===
    if query.data == "step_0":
        context.user_data["step"] = 1
        lesson = LESSONS["lesson_0"]
        await context.bot.send_video(chat_id=query.message.chat.id, video=lesson["file_id"], caption=lesson['title'])
        await context.bot.send_message(chat_id=query.message.chat.id, text="–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ö—Ä—É—Ç–æ! –î–µ—Ä–∂–∏—Ç–µ –£—Ä–æ–∫ 1.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –î–∞–ª—å—à–µ", callback_data="step_1")]]))

    # === –£—Ä–æ–∫ 1 ===
    elif query.data == "step_1":
        context.user_data["step"] = 2
        lesson = LESSONS["lesson_1"]
        await context.bot.send_video(chat_id=query.message.chat.id, video=lesson["file_id"], caption=lesson['title'])
        await context.bot.send_message(chat_id=query.message.chat.id, text="–ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 1 –£—Ä–æ–∫? –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="step_2")]]))

    # === –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å ===
    elif query.data == "step_2":
        context.user_data["step"] = 3
        await context.bot.send_message(chat_id=query.message.chat.id,
            text="–í–∏–∂—É –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–∏–¥–µ–æ –±—ã–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –º–æ–µ–≥–æ –º–∏–Ω–∏-–∫—É—Ä—Å–∞. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –º–∏–Ω–∏ –∫—É—Ä—Å", callback_data="buy")],
                [InlineKeyboardButton("‚ùå –ù–µ —Ö–æ—á—É –ø–æ–∫—É–ø–∞—Ç—å", callback_data="not_ready")]]))

    # === –ï—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç—å ===
    elif query.data == "not_ready":
        await context.bot.send_message(chat_id=query.message.chat.id,
            text="–ü–æ–Ω–∏–º–∞—é! –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start –∏ –ø—Ä–æ–π–¥–∏ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –æ –ø–æ–∫—É–ø–∫–µ.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫—É—Ä—Å—É! üòä")

    elif query.data == "buy":
        await context.bot.send_message(chat_id=query.message.chat.id,
            text="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –º–∏–Ω–∏-–∫—É—Ä—Å–∞ (500‚ÇΩ):", reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("Revolut", url="https://revolut.me/r/hJG50OBCC4")],
                    [InlineKeyboardButton("üîÅ –Ø –æ–ø–ª–∞—Ç–∏–ª ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="paid")]]))

    elif query.data == "paid":
        if user_id in PAID_USERS:
            await context.bot.send_message(chat_id=query.message.chat.id,
                text="‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç—É–ø–æ–º
            await show_lessons_menu(context, query.message.chat.id)
        else:
            await context.bot.send_message(chat_id=query.message.chat.id,
                text="üïê –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç.\n\n"
                     "–ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–ª–∏ ID –≤ –ª–∏—á–∫—É: @dekavetel")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
            username = query.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            await context.bot.send_message(chat_id=OWNER_ID,
                text=f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id})")


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —É—Ä–æ–∫–æ–≤ ===
async def show_lessons_menu(context, chat_id):
    buttons = []
    for key, lesson in LESSONS.items():
        if key.startswith("lesson_"):
            buttons.append([InlineKeyboardButton(lesson["title"], callback_data=f"menu_{key}")])

    await context.bot.send_message(chat_id=chat_id, text="üìö –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))


# === /menu –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in PAID_USERS:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏.")
        return

    await show_lessons_menu(context, update.message.chat.id)


# === –û—Ç–∫—Ä—ã—Ç–∏–µ –ª—é–±–æ–≥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞ ===
async def open_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in PAID_USERS:
        await query.edit_message_text("üîí –£—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        return

    key = query.data.replace("menu_", "")
    lesson = LESSONS.get(key)
    if lesson:
        await context.bot.send_video(chat_id=query.message.chat.id, video=lesson["file_id"], caption=lesson['title'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –≤ user_data
        context.user_data["current_lesson"] = key

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await show_next_lesson_options(context, query.message.chat.id, key)


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ ===
async def show_next_lesson_options(context, chat_id, current_lesson_key):
    current_num = int(current_lesson_key.split('_')[1])
    next_num = current_num + 1
    next_lesson_key = f"lesson_{next_num}"

    buttons = []

    if next_lesson_key in LESSONS:
        next_title = LESSONS[next_lesson_key]["title"]
        buttons.append([InlineKeyboardButton(f"‚ñ∂Ô∏è {next_title}", callback_data=f"menu_{next_lesson_key}")])

    buttons.append([InlineKeyboardButton("üìö –í—Å–µ —É—Ä–æ–∫–∏", callback_data="back_to_menu"),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")])

    await context.bot.send_message(chat_id=chat_id, text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É?",
        reply_markup=InlineKeyboardMarkup(buttons))


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ —É—Ä–æ–∫–∏" ===
async def back_to_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in PAID_USERS:
        await query.edit_message_text("üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        return

    buttons = []
    for key, lesson in LESSONS.items():
        if key.startswith("lesson_"):
            buttons.append([InlineKeyboardButton(lesson["title"], callback_data=f"menu_{key}")])

    await query.edit_message_text("üìö –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))


# === –ü–æ–ª—É—á–µ–Ω–∏–µ file_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ.")
        return
    if update.message.video:
        file_id = update.message.video.file_id
        await update.message.reply_text(f"`{file_id}`", parse_mode='Markdown')


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –Ω–∞—á–∞–ª–æ" ===
async def go_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–º–µ–Ω—ã update
    await context.bot.send_message(chat_id=query.message.chat.id,
        text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å ¬´–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏¬ª!\n\n"
             "–¢—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="step_0")],
            [InlineKeyboardButton("üí≥ –°—Ä–∞–∑—É –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="buy")]]))


# === –£–∑–Ω–∞—Ç—å —Å–≤–æ–π user_id ===
async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë§ –¢–≤–æ–π user_id: {update.message.from_user.id}")


# === –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant 12345678")
        return

    try:
        target_id = int(context.args[0])
        PAID_USERS.add(target_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –¥–æ—Å—Ç—É–ø–∞
        print(f"üí∞ –ê–¥–º–∏–Ω –≤—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

        await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        await context.bot.send_message(chat_id=target_id,
            text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    except (ValueError, IndexError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –æ—à–∏–±–∫–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        

# === –ó–ê–ü–£–°–ö ===
PORT = int(os.getenv("PORT", 8080))
BASE_URL = os.getenv("RAILWAY_STATIC_URL")

async def handle_webhook(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return web.Response(text="OK")

async def on_startup(app):
    await application.initialize()
    await application.start()
    webhook_url = f"https://{BASE_URL}/{BOT_TOKEN}"
    await application.bot.set_webhook(webhook_url)

async def root(request):
    return web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

# Telegram bot
application = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CommandHandler("myid", my_id))
application.add_handler(CommandHandler("grant", grant))
application.add_handler(MessageHandler(filters.VIDEO, get_file_id))
application.add_handler(CallbackQueryHandler(button_handler, pattern="^(step_.*|buy|paid|not_ready)$"))
application.add_handler(CallbackQueryHandler(go_home, pattern="^go_home$"))
application.add_handler(CallbackQueryHandler(open_lesson, pattern="^menu_lesson_.*"))
application.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern="^back_to_menu$"))

# aiohttp app
web_app = web.Application()
web_app.router.add_post(f"/{os.getenv('BOT_TOKEN')}", handle_webhook)
web_app.router.add_get("/", root)
web_app.on_startup.append(on_startup)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
    web.run_app(web_app, port=PORT)
