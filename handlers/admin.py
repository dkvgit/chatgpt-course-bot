from telegram import Update
from telegram.ext import ContextTypes
from utils.access import save_paid_users
from utils.supabase_db import add_paid_user, fetch_all_paid_users, remove_paid_user
from handlers.menu import set_paid_users as set_menu_paid_users  # üëà –≤–∞–∂–Ω–æ!
from handlers.start import set_paid_users as set_start_paid_users


PAID_USERS = None
OWNER_ID = 5425101564

def set_paid_users(users_set):
    global PAID_USERS
    PAID_USERS = users_set

async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üõ† grant() –ó–ê–ü–£–©–ï–ù")
    print("PAID_USERS =", PAID_USERS)

    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant 12345678")
        return

    try:
        target_id = int(context.args[0])
        print(f"üëâ –î–æ–±–∞–≤–ª—è–µ–º ID {target_id} –≤ Supabase")

        add_paid_user(target_id)  # ‚¨ÖÔ∏è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        updated_users = fetch_all_paid_users()
        set_paid_users(updated_users)          # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ admin.py
        set_menu_paid_users(updated_users)     # ‚¨ÖÔ∏è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ menu.py
        set_start_paid_users(updated_users)
        save_paid_users(updated_users)

        print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π PAID_USERS: {updated_users}")

        try:
            with open("paid_users.json") as f:
                print("üìÇ paid_users.json =", f.read())
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:", e)

        await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

        try:
            await context.bot.send_message(
                chat_id=target_id,
                text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
            )
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def revoke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üõ† revoke() –ó–ê–ü–£–©–ï–ù")
    print("PAID_USERS =", PAID_USERS)

    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /revoke 12345678")
        return

    try:
        target_id = int(context.args[0])
        print(f"üßπ –£–¥–∞–ª—è–µ–º ID {target_id} –∏–∑ Supabase")

        remove_paid_user(target_id)

        updated_users = fetch_all_paid_users()
        set_paid_users(updated_users)
        set_menu_paid_users(updated_users)  # ‚¨ÖÔ∏è –≤–∞–∂–Ω–æ!
        set_start_paid_users(updated_users)  # ‚¨ÖÔ∏è –∏ –∑–¥–µ—Å—å —Ç–æ–∂–µ
        save_paid_users(updated_users)

        await update.message.reply_text(f"‚ùå –î–æ—Å—Ç—É–ø —É–¥–∞–ª—ë–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def list_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not PAID_USERS:
        await update.message.reply_text("ü§∑ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç—É–ø–æ–º.")
        return

    user_list = "\n".join(f"‚Ä¢ `{uid}`" for uid in sorted(PAID_USERS))
    await update.message.reply_text(
        f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º:\n\n{user_list}",
        parse_mode="Markdown"
    )
