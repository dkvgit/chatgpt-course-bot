# handlers/payment.py

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from lessons_data import LESSONS

# üë§ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
OWNER_ID = 5425101564

# üí∞ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏)
PAID_USERS = set()

async def handle_payment_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "buy":
        await context.bot.send_message(chat_id=query.message.chat.id, text="""üî∏ **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç / –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:**

    üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 500‚ÇΩ / 6 EUR / 6 USDT**""", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üí≥ üî∏ –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π üî∏", callback_data="cards_info")],
                [InlineKeyboardButton("PayPal", url="https://paypal.me/dkvpay"),
                 InlineKeyboardButton("Boosty", url="https://boosty.to/dkvboosty/donate"),
                 InlineKeyboardButton("Ko-fi", url="https://ko-fi.com/dkvkofi")],
                [InlineKeyboardButton("üí∞ üî∏ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ) üî∏", callback_data="crypto_info")],
                [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å (BTC/USDT/ETH)", url="https://t.me/dekavetel")],
                 [InlineKeyboardButton("Binance Pay", callback_data="binance_details")],
                [InlineKeyboardButton("üí∏ üî∏ –ü–µ—Ä–µ–≤–æ–¥—ã üî∏", callback_data="bank_info")],
                [InlineKeyboardButton("Wise", url="https://wise.com/pay/me/denissk128"),
                 InlineKeyboardButton("Revolut", url="https://revolut.me/denmailde"),
                 InlineKeyboardButton("SEPA (EUR)", callback_data="sepa_details")],
                [InlineKeyboardButton("‚≠ê üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üî∏", callback_data="additional_info")],
                [InlineKeyboardButton("DonationAlerts", url="https://www.donationalerts.com/r/najug")],
                [InlineKeyboardButton("üîÅ –Ø –æ–ø–ª–∞—Ç–∏–ª ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="paid")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/dekavetel")]]), parse_mode="Markdown")

    elif query.data in ["cards_info", "crypto_info", "bank_info", "additional_info"]:
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ ‚¨áÔ∏è")

    elif query.data == "sepa_details":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="""üí∏ **SEPA-–ø–µ—Ä–µ–≤–æ–¥ (EUR)**

‚è∞ **–í–Ω–∏–º–∞–Ω–∏–µ:** –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π!

**–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:**
üë§ **–ò–º—è:** Deniss Kabakovs
üè¶ **IBAN:** LT67 3250 0982 5028 7638
üî¢ **BIC/SWIFT:** REVOLT21
üèõÔ∏è **–ë–∞–Ω–∫:** Revolut Bank UAB
üìç **–ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞:** Kostitucijos ave. 21B, 08130, Vilnius, Lithuania

üí∞ **–°—É–º–º–∞:** 6 EUR (–ø—Ä–∏–º–µ—Ä–Ω–æ 500‚ÇΩ)
üìù **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:** AI Course + –≤–∞—à @username

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
- –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
- –û–±—Ä–∞–±–æ—Ç–∫–∞ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ @dekavetel

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É!""",
            parse_mode="Markdown"
        )

    elif query.data == "binance_details":
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text="""‚Çø **Binance Pay**

üí∞ **Pay ID:** 39933544

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Binance
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "Pay"
3. –í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
4. –í–≤–µ–¥–∏—Ç–µ Pay ID: **39933544**
5. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: **6 USDT** (–ø—Ä–∏–º–µ—Ä–Ω–æ 500‚ÇΩ)
6. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É: "AI Course + –≤–∞—à @username"
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ @dekavetel –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!""",
            parse_mode="Markdown"
        )

    elif query.data == "paid":
        if user_id in PAID_USERS:
            await context.bot.send_message(chat_id=query.message.chat.id,
                text="‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º.")
            await show_lessons_menu(context, query.message.chat.id)
        else:
            await context.bot.send_message(chat_id=query.message.chat.id,
                text="üïê –ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª, –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–ø–ª–∞—Ç—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @dekavetel. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã "
                     "–º–æ–∂–µ—Ç "
                     "–∑–∞–Ω—è—Ç—å –¥–æ 10 "
                     "–º–∏–Ω—É—Ç.\n\n"
                     "",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/dekavetel")]
                ])
            )
            username = query.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            await context.bot.send_message(chat_id=OWNER_ID,
                text=f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n@{username} (ID: {user_id})")

    elif query.data == "not_ready":
        await context.bot.send_message(chat_id=query.message.chat.id,
            text="–ü–æ–Ω–∏–º–∞—é! –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–ø–∏—à–∏ /start.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫—É—Ä—Å—É! üòä\n\n"
                 "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—â–∞–π—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/dekavetelega")]
            ])
        )

# ‚¨áÔ∏è –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ main.py, –ø–æ–∑–∂–µ –≤—ã–Ω–µ—Å–µ–º —Ç–æ–∂–µ
async def show_lessons_menu(context, chat_id):
    buttons = []
    for key, lesson in LESSONS.items():
        if key.startswith("lesson_"):
            buttons.append([InlineKeyboardButton(lesson["title"], callback_data=f"menu_{key}")])

    await context.bot.send_message(chat_id=chat_id, text="üìö –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))
